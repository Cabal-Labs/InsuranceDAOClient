{
  "address": "0x08c5966e2f4B7c8773B76c9798D10699ac9B321C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury_wallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hospitalName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "patientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "medicalProcedure",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "medicalProcedureCost",
          "type": "uint256"
        }
      ],
      "name": "ClaimCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "hospitalName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "hospitalAddress",
          "type": "address"
        }
      ],
      "name": "HospitalAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "hospitalName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "patientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "medicalProcedure",
          "type": "uint256"
        }
      ],
      "name": "HospitalPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLoadingRate",
          "type": "uint256"
        }
      ],
      "name": "LoadingRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "policy",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lock",
          "type": "address"
        }
      ],
      "name": "MembershipAddedToPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "policyNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "coverage",
          "type": "uint256[]"
        }
      ],
      "name": "PolicyCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "code",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "probability",
          "type": "uint256"
        }
      ],
      "name": "ProcedureAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "hospitalName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "hospitalAddress",
          "type": "address"
        }
      ],
      "name": "addHospital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "coverage",
          "type": "uint256[]"
        }
      ],
      "name": "addInsurancePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "policy",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lock",
          "type": "address"
        }
      ],
      "name": "addMembershipToPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "code",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "probability",
          "type": "uint256"
        }
      ],
      "name": "addProcedure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "applyPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "string",
          "name": "hospitalName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "patient_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "medicalProcedure",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "medicalProcedureCost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllClaims",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "hospitalName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "patient_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "medicalProcedure",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "medicalProcedureCost",
              "type": "uint256"
            }
          ],
          "internalType": "struct Treasury.Claim[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        }
      ],
      "name": "getClaim",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "hospitalName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "patient_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "medicalProcedure",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "medicalProcedureCost",
              "type": "uint256"
            }
          ],
          "internalType": "struct Treasury.Claim",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "hospitalName",
          "type": "string"
        }
      ],
      "name": "getHospitalAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "policy",
          "type": "uint256"
        }
      ],
      "name": "getMembershipFromPolicy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "policyNumber",
          "type": "uint256"
        }
      ],
      "name": "getPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loading_rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "hospital_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_patient_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "medicalProcedure",
          "type": "uint256"
        }
      ],
      "name": "payHospital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy_counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "new_loading_rate",
          "type": "uint256"
        }
      ],
      "name": "setLoadingRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury_wallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c72221c6f432bed6b72c666630b18dfe7f3e5f8ab94774da048c86c7c392ee2",
  "receipt": {
    "to": null,
    "from": "0xB496D0EcBD6695A9B6635A0CDF84080858ADAcBD",
    "contractAddress": "0x08c5966e2f4B7c8773B76c9798D10699ac9B321C",
    "transactionIndex": 28,
    "gasUsed": "1397343",
    "logsBloom": "0x
    "blockHash": "0x8788acc3e4f893680d39a6fc457cb9b2fe3b139a12fbfa8b52bfc1dd15875299",
    "transactionHash": "0x7c72221c6f432bed6b72c666630b18dfe7f3e5f8ab94774da048c86c7c392ee2",
    "logs": [],
    "blockNumber": 9748439,
    "cumulativeGasUsed": "4778466",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3FE96Fd6ff721B15d5946CBb301AADEc7C0928C7"
  ],
  "numDeployments": 2,
  "solcInputHash": "d8bb1fb01b8d52b57bc3a8f59e3cb5b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury_wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hospitalName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"patientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"medicalProcedure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"medicalProcedureCost\",\"type\":\"uint256\"}],\"name\":\"ClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"hospitalName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hospitalAddress\",\"type\":\"address\"}],\"name\":\"HospitalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"hospitalName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"medicalProcedure\",\"type\":\"uint256\"}],\"name\":\"HospitalPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLoadingRate\",\"type\":\"uint256\"}],\"name\":\"LoadingRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"policy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lock\",\"type\":\"address\"}],\"name\":\"MembershipAddedToPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"policyNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"coverage\",\"type\":\"uint256[]\"}],\"name\":\"PolicyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"}],\"name\":\"ProcedureAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hospitalName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"hospitalAddress\",\"type\":\"address\"}],\"name\":\"addHospital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"coverage\",\"type\":\"uint256[]\"}],\"name\":\"addInsurancePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"policy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lock\",\"type\":\"address\"}],\"name\":\"addMembershipToPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"}],\"name\":\"addProcedure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"applyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"hospitalName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"patient_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"medicalProcedure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"medicalProcedureCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllClaims\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"hospitalName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"patient_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"medicalProcedure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"medicalProcedureCost\",\"type\":\"uint256\"}],\"internalType\":\"struct Treasury.Claim[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"}],\"name\":\"getClaim\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"hospitalName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"patient_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"medicalProcedure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"medicalProcedureCost\",\"type\":\"uint256\"}],\"internalType\":\"struct Treasury.Claim\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hospitalName\",\"type\":\"string\"}],\"name\":\"getHospitalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"policy\",\"type\":\"uint256\"}],\"name\":\"getMembershipFromPolicy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"policyNumber\",\"type\":\"uint256\"}],\"name\":\"getPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loading_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hospital_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_patient_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"medicalProcedure\",\"type\":\"uint256\"}],\"name\":\"payHospital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy_counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_loading_rate\",\"type\":\"uint256\"}],\"name\":\"setLoadingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0xd2dd6003a2dc02ab905fd405938322e510429d19ae6c07c2c683d70f13ab2f36\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\ncontract Treasury {\\n\\n    struct Claim {\\n        string hospitalName;\\n        address patient_address;\\n        uint256 medicalProcedure;\\n        uint256 medicalProcedureCost;\\n    }\\n\\n    mapping(uint256 => Claim) public claims; // Mapping to store claims by ID\\n    uint256 public claimCounter;\\n    mapping(string => address) private hospitalList; //List of hostpitals that can be paid\\n\\tmapping(uint256 => uint256) private medical_procedure_cost;\\n    mapping(uint256 => uint256) private medical_procedure_probability;\\n\\tmapping(uint256 => uint256[]) private policy; \\n\\tmapping(uint256 => address) private membership_nft;\\n\\tmapping(uint256 => string) private policy_name;\\n    uint256 public loading_rate;\\n\\tuint256 public policy_counter;\\n\\taddress public treasury_wallet;\\n\\n\\tevent HospitalAdded(string indexed hospitalName, address indexed hospitalAddress);\\n    event ClaimCreated(uint256 indexed claimId, string hospitalName, address patientAddress, uint256 medicalProcedure, uint256 medicalProcedureCost);\\n    event HospitalPaid(string indexed hospitalName, uint256 paymentAmount, address indexed patientAddress, uint256 medicalProcedure);\\n    event PolicyCreated(uint256 indexed policyNumber, string name, uint256[] coverage);\\n    event ProcedureAdded(uint256 code, uint256 cost, uint256 probability);\\n    event MembershipAddedToPolicy(uint256 indexed policy, address lock);\\n    event LoadingRateChanged(uint256 newLoadingRate);\\n\\n    constructor(address _treasury_wallet) {\\n        loading_rate = 10; //10% loading\\n\\t\\tpolicy_counter = 0;\\n\\t\\ttreasury_wallet= _treasury_wallet;\\n    }\\n\\n\\n    modifier onlyVoter() {\\n        require(msg.sender == treasury_wallet, \\\"Only a voter can call this function\\\");\\n\\t\\t_;\\n    }\\n\\n    // Add hospital to the list\\n    function addHospital(string memory hospitalName, address hospitalAddress) public  {\\n        require(hospitalList[hospitalName] == address(0), \\\"Hospital already exists\\\");\\n        hospitalList[hospitalName] = hospitalAddress;\\n\\t\\temit HospitalAdded(hospitalName, hospitalAddress);\\n    }\\n\\n    // Function to get the address of a hospital by name\\n    function getHospitalAddress(string memory hospitalName) public view returns (address) {\\n        return hospitalList[hospitalName];\\n    }\\n\\n    function payHospital(string memory hospital_name, uint256 paymentAmount, address _patient_address, uint256 medicalProcedure) public onlyVoter {\\n        require(hospitalList[hospital_name] != address(0), \\\"hospital does not exist\\\");\\n        address hospitalAddress = hospitalList[hospital_name];\\n\\n       // require({{Safe account address goes here( I think it's msg.sender)}}.balance >= paymentAmount, \\\"Insufficient funds\\\");\\n\\n        // Attempt to send the payment to the hospital address\\n        (bool success, ) = hospitalAddress.call{value: paymentAmount}(\\\"\\\");\\n        require(success, \\\"Payment failed\\\");\\n\\n        claims[claimCounter] = Claim({\\n            hospitalName: hospital_name,\\n            patient_address: _patient_address,\\n            medicalProcedure: medicalProcedure,\\n            medicalProcedureCost: paymentAmount\\n        });\\n\\n        claimCounter++;\\n        \\n    }\\n\\n    function getClaim(uint256 claimId) public view returns (Claim memory) {\\n        require(claimId < claimCounter, \\\"Claim does not exist\\\");\\n        return claims[claimId];\\n    }\\n\\n    function getAllClaims() public view returns (Claim[] memory) {\\n        Claim[] memory allClaims = new Claim[](claimCounter);\\n        for (uint256 i = 0; i < claimCounter; i++) {\\n            allClaims[i] = claims[i];\\n        }\\n        return allClaims;\\n    }\\n\\n\\n\\tfunction setLoadingRate(uint256 new_loading_rate) public onlyVoter {\\n\\t\\tloading_rate = new_loading_rate;\\n\\t\\temit LoadingRateChanged(new_loading_rate);\\n\\t} \\n\\n\\tfunction addProcedure(uint256 code, uint256 cost, uint256 probability) public{\\n\\t\\tmedical_procedure_cost[code] =cost;\\n\\t\\tmedical_procedure_probability[code] = probability;\\n\\t\\temit ProcedureAdded(code, cost, probability);\\n\\t}\\n\\n\\tfunction addInsurancePolicy(string memory name, uint256[] calldata coverage) public{\\n\\t\\t//create a health insurance policy that covers x,y,z conditions\\n\\t\\tpolicy[policy_counter] = coverage;\\n\\t\\tpolicy_name[policy_counter] = name;\\n\\t\\tpolicy_counter++;\\n\\t\\temit PolicyCreated(policy_counter, name, coverage);\\n\\t}\\n\\n\\tfunction addMembershipToPolicy(uint256 policy, address lock)public{\\n\\t\\tmembership_nft[policy] = lock;\\n\\t\\temit MembershipAddedToPolicy(policy, lock);\\n\\t}\\n\\n\\tfunction getMembershipFromPolicy(uint256 policy)public view returns(address) {\\n\\t\\treturn membership_nft[policy];\\n\\t}\\n\\n\\tfunction getPremium(uint256 policyNumber) public view returns(uint256){\\n\\t\\tuint256 expectedLoss = 0;\\n\\t\\tuint256[] memory coverage = policy[policyNumber];\\n\\t\\tfor(uint256 i = 0; i<coverage.length; i++){\\n\\t\\t\\texpectedLoss+= medical_procedure_cost[coverage[i]] * medical_procedure_probability[coverage[i]]; \\n\\t\\t}\\n\\t\\tuint256 profit = applyPercentage(expectedLoss, loading_rate) + expectedLoss;\\n\\t\\treturn expectedLoss + profit;\\n\\t}\\n\\n    function applyPercentage(uint256 amount, uint256 percentage) public pure returns (uint256) {\\n        require(percentage <= 100, \\\"Percentage should be a whole number between 1 and 100\\\");\\n        return (amount * percentage) / 100;\\n    }\\n\\n\\n}\",\"keccak256\":\"0x991551293d82a38956cfac30ac8a03e6a394755f12b151608b8b6100dc3ac4a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620018483803806200184883398101604081905262000034916200009e565b600a6008819055600060095580546001600160a01b0319166001600160a01b0392909216919091179055620000cb565b60006001600160a01b0382165b92915050565b620000828162000064565b81146200008e57600080fd5b50565b8051620000718162000077565b600060208284031215620000b557620000b5600080fd5b6000620000c3848462000091565b949350505050565b61176d80620000db6000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80634efa8f17116100b25780639512fb3b11610081578063a888c2cd11610066578063a888c2cd14610260578063a98db39614610283578063bf90c02d1461028c57600080fd5b80639512fb3b1461023a578063a0dabfcb1461024d57600080fd5b80634efa8f17146101e95780635aef2447146101f25780635b23c27d146102125780635c405b811461022757600080fd5b80633416af8f116100ee5780633416af8f146101875780633c0e86ba146101b05780633d25ac8c146101c35780634d099648146101d657600080fd5b806308f54c3e146101205780630cf33275146101355780631bf1fffb146101545780633098920714610167575b600080fd5b61013361012e366004610de9565b61029f565b005b61013e60095481565b60405161014b9190610e67565b60405180910390f35b61013e610162366004610e90565b610330565b600a5461017a906001600160a01b031681565b60405161014b9190610ecb565b61017a610195366004610e90565b6000908152600660205260409020546001600160a01b031690565b6101336101be366004610ed9565b61044c565b6101336101d1366004610f3d565b6104ab565b6101336101e4366004610fbb565b610681565b61013e60015481565b610205610200366004610e90565b61075e565b60405161014b91906110bb565b61021a61088b565b60405161014b919061113e565b610133610235366004610e90565b610a29565b61013361024836600461114f565b610a93565b61013e61025b366004611171565b610b05565b61027361026e366004610e90565b610b47565b60405161014b94939291906111a4565b61013e60085481565b61017a61029a3660046111de565b610c03565b60095460009081526005602052604090206102bb908383610c34565b5060095460009081526007602052604090206102d784826112fe565b50600980549060006102e8836113d8565b91905055506009547f9ef9b973661c495624cfd675c93206df84209de5d252c5190623c1def0d5e06e8484846040516103239392919061144d565b60405180910390a2505050565b600081815260056020908152604080832080548251818502810185019093528083528493849392919083018282801561038857602002820191906000526020600020905b815481526020019060010190808311610374575b5050505050905060005b815181101561041d57600460008383815181106103b1576103b1611473565b6020026020010151815260200190815260200160002054600360008484815181106103de576103de611473565b60200260200101518152602001908152602001600020546103ff9190611489565b61040990846114a8565b925080610415816113d8565b915050610392565b5060008261042d84600854610b05565b61043791906114a8565b905061044381846114a8565b95945050505050565b6000838152600360209081526040808320859055600490915290819020829055517f42dbedb466fff6b6408608cb4a0260cfa32164f40f1da2aa85a967e42c7dc8129061049e908590859085906114bb565b60405180910390a1505050565b600a546001600160a01b031633146104de5760405162461bcd60e51b81526004016104d590611540565b60405180910390fd5b60006001600160a01b03166002856040516104f99190611572565b908152604051908190036020019020546001600160a01b03160361052f5760405162461bcd60e51b81526004016104d5906115bc565b60006002856040516105419190611572565b908152604051908190036020018120546001600160a01b031691506000908290869061056c906115cc565b60006040518083038185875af1925050503d80600081146105a9576040519150601f19603f3d011682016040523d82523d6000602084013e6105ae565b606091505b50509050806105cf5760405162461bcd60e51b81526004016104d59061160b565b604080516080810182528781526001600160a01b03861660208083019190915281830186905260608201889052600154600090815290819052919091208151819061061a90826112fe565b5060208201516001828101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390931692909217909155604083015160028301556060909201516003909101558054906000610674836113d8565b9190505550505050505050565b60006001600160a01b031660028360405161069c9190611572565b908152604051908190036020019020546001600160a01b0316146106d25760405162461bcd60e51b81526004016104d59061164f565b806002836040516106e39190611572565b90815260405190819003602001812080546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199091161790559082169061072a908490611572565b604051908190038120907f6e3a1bab169a0e2be4f8574901a5218e9f7319af1973e0d304486c3e5cebd3db90600090a35050565b61079260405180608001604052806060815260200160006001600160a01b0316815260200160008152602001600081525090565b60015482106107b35760405162461bcd60e51b81526004016104d590611693565b600082815260208190526040908190208151608081019092528054829082906107db9061122f565b80601f01602080910402602001604051908101604052809291908181526020018280546108079061122f565b80156108545780601f1061082957610100808354040283529160200191610854565b820191906000526020600020905b81548152906001019060200180831161083757829003601f168201915b505050918352505060018201546001600160a01b031660208201526002820154604082015260039091015460609091015292915050565b6060600060015467ffffffffffffffff8111156108aa576108aa610c94565b60405190808252806020026020018201604052801561090f57816020015b6108fc60405180608001604052806060815260200160006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816108c85790505b50905060005b600154811015610a2357600081815260208190526040908190208151608081019092528054829082906109479061122f565b80601f01602080910402602001604051908101604052809291908181526020018280546109739061122f565b80156109c05780601f10610995576101008083540402835291602001916109c0565b820191906000526020600020905b8154815290600101906020018083116109a357829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003909101546060909101528251839083908110610a0557610a05611473565b60200260200101819052508080610a1b906113d8565b915050610915565b50919050565b600a546001600160a01b03163314610a535760405162461bcd60e51b81526004016104d590611540565b60088190556040517f02dfc8314647139d3b5d77d7518752fd07b019c15acb97bc9ddec5505d9024ac90610a88908390610e67565b60405180910390a150565b60008281526006602052604090819020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790555182907f5cd227421765f010130529b6663cfe153b5bdda5e040201828935dda96b1e5ed90610af9908490610ecb565b60405180910390a25050565b60006064821115610b285760405162461bcd60e51b81526004016104d5906116fd565b6064610b348385611489565b610b3e9190611723565b90505b92915050565b600060208190529081526040902080548190610b629061122f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8e9061122f565b8015610bdb5780601f10610bb057610100808354040283529160200191610bdb565b820191906000526020600020905b815481529060010190602001808311610bbe57829003601f168201915b505050506001830154600284015460039094015492936001600160a01b039091169290915084565b6000600282604051610c159190611572565b908152604051908190036020019020546001600160a01b031692915050565b828054828255906000526020600020908101928215610c6f579160200282015b82811115610c6f578235825591602001919060010190610c54565b50610c7b929150610c7f565b5090565b5b80821115610c7b5760008155600101610c80565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610cd057610cd0610c94565b6040525050565b6000610ce260405190565b9050610cee8282610caa565b919050565b600067ffffffffffffffff821115610d0d57610d0d610c94565b601f19601f83011660200192915050565b82818337506000910152565b6000610d3d610d3884610cf3565b610cd7565b905082815260208101848484011115610d5857610d58600080fd5b610d63848285610d1e565b509392505050565b600082601f830112610d7f57610d7f600080fd5b8135610d8f848260208601610d2a565b949350505050565b60008083601f840112610dac57610dac600080fd5b50813567ffffffffffffffff811115610dc757610dc7600080fd5b602083019150836020820283011115610de257610de2600080fd5b9250929050565b600080600060408486031215610e0157610e01600080fd5b833567ffffffffffffffff811115610e1b57610e1b600080fd5b610e2786828701610d6b565b935050602084013567ffffffffffffffff811115610e4757610e47600080fd5b610e5386828701610d97565b92509250509250925092565b805b82525050565b60208101610b418284610e5f565b805b8114610e8257600080fd5b50565b8035610b4181610e75565b600060208284031215610ea557610ea5600080fd5b6000610d8f8484610e85565b60006001600160a01b038216610b41565b610e6181610eb1565b60208101610b418284610ec2565b600080600060608486031215610ef157610ef1600080fd5b6000610efd8686610e85565b9350506020610f0e86828701610e85565b9250506040610f1f86828701610e85565b9150509250925092565b610e7781610eb1565b8035610b4181610f29565b60008060008060808587031215610f5657610f56600080fd5b843567ffffffffffffffff811115610f7057610f70600080fd5b610f7c87828801610d6b565b9450506020610f8d87828801610e85565b9350506040610f9e87828801610f32565b9250506060610faf87828801610e85565b91505092959194509250565b60008060408385031215610fd157610fd1600080fd5b823567ffffffffffffffff811115610feb57610feb600080fd5b610ff785828601610d6b565b925050602061100885828601610f32565b9150509250929050565b60005b8381101561102d578181015183820152602001611015565b50506000910152565b6000611040825190565b808452602084019350611057818560208601611012565b601f01601f19169290920192915050565b80516080808452600091908401906110808282611036565b91505060208301516110956020860182610ec2565b5060408301516110a86040860182610e5f565b506060830151610d636060860182610e5f565b60208082528101610b3e8184611068565b6000610b3e8383611068565b60006110e2825190565b808452602084019350836020820285016110fc8560200190565b8060005b85811015611131578484038952815161111985826110cc565b94506020830160209a909a0199925050600101611100565b5091979650505050505050565b60208082528101610b3e81846110d8565b6000806040838503121561116557611165600080fd5b6000610ff78585610e85565b6000806040838503121561118757611187600080fd5b60006111938585610e85565b925050602061100885828601610e85565b608080825281016111b58187611036565b90506111c46020830186610ec2565b6111d16040830185610e5f565b6104436060830184610e5f565b6000602082840312156111f3576111f3600080fd5b813567ffffffffffffffff81111561120d5761120d600080fd5b610d8f84828501610d6b565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061124357607f821691505b602082108103610a2357610a23611219565b6000610b416112618381565b90565b61126d83611255565b81546008840282811b60001990911b908116901990911617825550505050565b600061129a818484611264565b505050565b818110156112ba576112b260008261128d565b60010161129f565b5050565b601f82111561129a576000818152602090206020601f850104810160208510156112e55750805b6112f76020601f86010483018261129f565b5050505050565b815167ffffffffffffffff81111561131857611318610c94565b611322825461122f565b61132d8282856112be565b6020601f83116001811461136157600084156113495750858201515b600019600886021c19811660028602178655506113ba565b600085815260208120601f198616915b828110156113915788850151825560209485019460019092019101611371565b868310156113ad5784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982036113eb576113eb6113c2565b5060010190565b82818337505050565b81835260006020840193507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561143657611436600080fd5b6020830292506114478385846113f2565b50500190565b6040808252810161145e8186611036565b905081810360208301526104438184866113fb565b634e487b7160e01b600052603260045260246000fd5b8181028082158382048514176114a1576114a16113c2565b5092915050565b80820180821115610b4157610b416113c2565b606081016114c98286610e5f565b6114d66020830185610e5f565b610d8f6040830184610e5f565b602381526000602082017f4f6e6c79206120766f7465722063616e2063616c6c20746869732066756e637481527f696f6e0000000000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101610b41816114e3565b600061155a825190565b611568818560208601611012565b9290920192915050565b600061157e8284611550565b9392505050565b601781526000602082017f686f73706974616c20646f6573206e6f74206578697374000000000000000000815291505b5060200190565b60208082528101610b4181611585565b6000610b4182611261565b600e81526000602082017f5061796d656e74206661696c6564000000000000000000000000000000000000815291506115b5565b60208082528101610b41816115d7565b601781526000602082017f486f73706974616c20616c726561647920657869737473000000000000000000815291506115b5565b60208082528101610b418161161b565b601481526000602082017f436c61696d20646f6573206e6f74206578697374000000000000000000000000815291506115b5565b60208082528101610b418161165f565b603581526000602082017f50657263656e746167652073686f756c6420626520612077686f6c65206e756d81527f626572206265747765656e203120616e6420313030000000000000000000000060208201529150611539565b60208082528101610b41816116a3565b634e487b7160e01b600052601260045260246000fd5b6000826117325761173261170d565b50049056fea26469706673582212201825974674d445dd1b714bd7e57a277c2823fa4e5ab29a0c88f73bcb8475d75b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c80634efa8f17116100b25780639512fb3b11610081578063a888c2cd11610066578063a888c2cd14610260578063a98db39614610283578063bf90c02d1461028c57600080fd5b80639512fb3b1461023a578063a0dabfcb1461024d57600080fd5b80634efa8f17146101e95780635aef2447146101f25780635b23c27d146102125780635c405b811461022757600080fd5b80633416af8f116100ee5780633416af8f146101875780633c0e86ba146101b05780633d25ac8c146101c35780634d099648146101d657600080fd5b806308f54c3e146101205780630cf33275146101355780631bf1fffb146101545780633098920714610167575b600080fd5b61013361012e366004610de9565b61029f565b005b61013e60095481565b60405161014b9190610e67565b60405180910390f35b61013e610162366004610e90565b610330565b600a5461017a906001600160a01b031681565b60405161014b9190610ecb565b61017a610195366004610e90565b6000908152600660205260409020546001600160a01b031690565b6101336101be366004610ed9565b61044c565b6101336101d1366004610f3d565b6104ab565b6101336101e4366004610fbb565b610681565b61013e60015481565b610205610200366004610e90565b61075e565b60405161014b91906110bb565b61021a61088b565b60405161014b919061113e565b610133610235366004610e90565b610a29565b61013361024836600461114f565b610a93565b61013e61025b366004611171565b610b05565b61027361026e366004610e90565b610b47565b60405161014b94939291906111a4565b61013e60085481565b61017a61029a3660046111de565b610c03565b60095460009081526005602052604090206102bb908383610c34565b5060095460009081526007602052604090206102d784826112fe565b50600980549060006102e8836113d8565b91905055506009547f9ef9b973661c495624cfd675c93206df84209de5d252c5190623c1def0d5e06e8484846040516103239392919061144d565b60405180910390a2505050565b600081815260056020908152604080832080548251818502810185019093528083528493849392919083018282801561038857602002820191906000526020600020905b815481526020019060010190808311610374575b5050505050905060005b815181101561041d57600460008383815181106103b1576103b1611473565b6020026020010151815260200190815260200160002054600360008484815181106103de576103de611473565b60200260200101518152602001908152602001600020546103ff9190611489565b61040990846114a8565b925080610415816113d8565b915050610392565b5060008261042d84600854610b05565b61043791906114a8565b905061044381846114a8565b95945050505050565b6000838152600360209081526040808320859055600490915290819020829055517f42dbedb466fff6b6408608cb4a0260cfa32164f40f1da2aa85a967e42c7dc8129061049e908590859085906114bb565b60405180910390a1505050565b600a546001600160a01b031633146104de5760405162461bcd60e51b81526004016104d590611540565b60405180910390fd5b60006001600160a01b03166002856040516104f99190611572565b908152604051908190036020019020546001600160a01b03160361052f5760405162461bcd60e51b81526004016104d5906115bc565b60006002856040516105419190611572565b908152604051908190036020018120546001600160a01b031691506000908290869061056c906115cc565b60006040518083038185875af1925050503d80600081146105a9576040519150601f19603f3d011682016040523d82523d6000602084013e6105ae565b606091505b50509050806105cf5760405162461bcd60e51b81526004016104d59061160b565b604080516080810182528781526001600160a01b03861660208083019190915281830186905260608201889052600154600090815290819052919091208151819061061a90826112fe565b5060208201516001828101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390931692909217909155604083015160028301556060909201516003909101558054906000610674836113d8565b9190505550505050505050565b60006001600160a01b031660028360405161069c9190611572565b908152604051908190036020019020546001600160a01b0316146106d25760405162461bcd60e51b81526004016104d59061164f565b806002836040516106e39190611572565b90815260405190819003602001812080546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff199091161790559082169061072a908490611572565b604051908190038120907f6e3a1bab169a0e2be4f8574901a5218e9f7319af1973e0d304486c3e5cebd3db90600090a35050565b61079260405180608001604052806060815260200160006001600160a01b0316815260200160008152602001600081525090565b60015482106107b35760405162461bcd60e51b81526004016104d590611693565b600082815260208190526040908190208151608081019092528054829082906107db9061122f565b80601f01602080910402602001604051908101604052809291908181526020018280546108079061122f565b80156108545780601f1061082957610100808354040283529160200191610854565b820191906000526020600020905b81548152906001019060200180831161083757829003601f168201915b505050918352505060018201546001600160a01b031660208201526002820154604082015260039091015460609091015292915050565b6060600060015467ffffffffffffffff8111156108aa576108aa610c94565b60405190808252806020026020018201604052801561090f57816020015b6108fc60405180608001604052806060815260200160006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816108c85790505b50905060005b600154811015610a2357600081815260208190526040908190208151608081019092528054829082906109479061122f565b80601f01602080910402602001604051908101604052809291908181526020018280546109739061122f565b80156109c05780601f10610995576101008083540402835291602001916109c0565b820191906000526020600020905b8154815290600101906020018083116109a357829003601f168201915b505050918352505060018201546001600160a01b03166020820152600282015460408201526003909101546060909101528251839083908110610a0557610a05611473565b60200260200101819052508080610a1b906113d8565b915050610915565b50919050565b600a546001600160a01b03163314610a535760405162461bcd60e51b81526004016104d590611540565b60088190556040517f02dfc8314647139d3b5d77d7518752fd07b019c15acb97bc9ddec5505d9024ac90610a88908390610e67565b60405180910390a150565b60008281526006602052604090819020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790555182907f5cd227421765f010130529b6663cfe153b5bdda5e040201828935dda96b1e5ed90610af9908490610ecb565b60405180910390a25050565b60006064821115610b285760405162461bcd60e51b81526004016104d5906116fd565b6064610b348385611489565b610b3e9190611723565b90505b92915050565b600060208190529081526040902080548190610b629061122f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8e9061122f565b8015610bdb5780601f10610bb057610100808354040283529160200191610bdb565b820191906000526020600020905b815481529060010190602001808311610bbe57829003601f168201915b505050506001830154600284015460039094015492936001600160a01b039091169290915084565b6000600282604051610c159190611572565b908152604051908190036020019020546001600160a01b031692915050565b828054828255906000526020600020908101928215610c6f579160200282015b82811115610c6f578235825591602001919060010190610c54565b50610c7b929150610c7f565b5090565b5b80821115610c7b5760008155600101610c80565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610cd057610cd0610c94565b6040525050565b6000610ce260405190565b9050610cee8282610caa565b919050565b600067ffffffffffffffff821115610d0d57610d0d610c94565b601f19601f83011660200192915050565b82818337506000910152565b6000610d3d610d3884610cf3565b610cd7565b905082815260208101848484011115610d5857610d58600080fd5b610d63848285610d1e565b509392505050565b600082601f830112610d7f57610d7f600080fd5b8135610d8f848260208601610d2a565b949350505050565b60008083601f840112610dac57610dac600080fd5b50813567ffffffffffffffff811115610dc757610dc7600080fd5b602083019150836020820283011115610de257610de2600080fd5b9250929050565b600080600060408486031215610e0157610e01600080fd5b833567ffffffffffffffff811115610e1b57610e1b600080fd5b610e2786828701610d6b565b935050602084013567ffffffffffffffff811115610e4757610e47600080fd5b610e5386828701610d97565b92509250509250925092565b805b82525050565b60208101610b418284610e5f565b805b8114610e8257600080fd5b50565b8035610b4181610e75565b600060208284031215610ea557610ea5600080fd5b6000610d8f8484610e85565b60006001600160a01b038216610b41565b610e6181610eb1565b60208101610b418284610ec2565b600080600060608486031215610ef157610ef1600080fd5b6000610efd8686610e85565b9350506020610f0e86828701610e85565b9250506040610f1f86828701610e85565b9150509250925092565b610e7781610eb1565b8035610b4181610f29565b60008060008060808587031215610f5657610f56600080fd5b843567ffffffffffffffff811115610f7057610f70600080fd5b610f7c87828801610d6b565b9450506020610f8d87828801610e85565b9350506040610f9e87828801610f32565b9250506060610faf87828801610e85565b91505092959194509250565b60008060408385031215610fd157610fd1600080fd5b823567ffffffffffffffff811115610feb57610feb600080fd5b610ff785828601610d6b565b925050602061100885828601610f32565b9150509250929050565b60005b8381101561102d578181015183820152602001611015565b50506000910152565b6000611040825190565b808452602084019350611057818560208601611012565b601f01601f19169290920192915050565b80516080808452600091908401906110808282611036565b91505060208301516110956020860182610ec2565b5060408301516110a86040860182610e5f565b506060830151610d636060860182610e5f565b60208082528101610b3e8184611068565b6000610b3e8383611068565b60006110e2825190565b808452602084019350836020820285016110fc8560200190565b8060005b85811015611131578484038952815161111985826110cc565b94506020830160209a909a0199925050600101611100565b5091979650505050505050565b60208082528101610b3e81846110d8565b6000806040838503121561116557611165600080fd5b6000610ff78585610e85565b6000806040838503121561118757611187600080fd5b60006111938585610e85565b925050602061100885828601610e85565b608080825281016111b58187611036565b90506111c46020830186610ec2565b6111d16040830185610e5f565b6104436060830184610e5f565b6000602082840312156111f3576111f3600080fd5b813567ffffffffffffffff81111561120d5761120d600080fd5b610d8f84828501610d6b565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061124357607f821691505b602082108103610a2357610a23611219565b6000610b416112618381565b90565b61126d83611255565b81546008840282811b60001990911b908116901990911617825550505050565b600061129a818484611264565b505050565b818110156112ba576112b260008261128d565b60010161129f565b5050565b601f82111561129a576000818152602090206020601f850104810160208510156112e55750805b6112f76020601f86010483018261129f565b5050505050565b815167ffffffffffffffff81111561131857611318610c94565b611322825461122f565b61132d8282856112be565b6020601f83116001811461136157600084156113495750858201515b600019600886021c19811660028602178655506113ba565b600085815260208120601f198616915b828110156113915788850151825560209485019460019092019101611371565b868310156113ad5784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982036113eb576113eb6113c2565b5060010190565b82818337505050565b81835260006020840193507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561143657611436600080fd5b6020830292506114478385846113f2565b50500190565b6040808252810161145e8186611036565b905081810360208301526104438184866113fb565b634e487b7160e01b600052603260045260246000fd5b8181028082158382048514176114a1576114a16113c2565b5092915050565b80820180821115610b4157610b416113c2565b606081016114c98286610e5f565b6114d66020830185610e5f565b610d8f6040830184610e5f565b602381526000602082017f4f6e6c79206120766f7465722063616e2063616c6c20746869732066756e637481527f696f6e0000000000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101610b41816114e3565b600061155a825190565b611568818560208601611012565b9290920192915050565b600061157e8284611550565b9392505050565b601781526000602082017f686f73706974616c20646f6573206e6f74206578697374000000000000000000815291505b5060200190565b60208082528101610b4181611585565b6000610b4182611261565b600e81526000602082017f5061796d656e74206661696c6564000000000000000000000000000000000000815291506115b5565b60208082528101610b41816115d7565b601781526000602082017f486f73706974616c20616c726561647920657869737473000000000000000000815291506115b5565b60208082528101610b418161161b565b601481526000602082017f436c61696d20646f6573206e6f74206578697374000000000000000000000000815291506115b5565b60208082528101610b418161165f565b603581526000602082017f50657263656e746167652073686f756c6420626520612077686f6c65206e756d81527f626572206265747765656e203120616e6420313030000000000000000000000060208201529150611539565b60208082528101610b41816116a3565b634e487b7160e01b600052601260045260246000fd5b6000826117325761173261170d565b50049056fea26469706673582212201825974674d445dd1b714bd7e57a277c2823fa4e5ab29a0c88f73bcb8475d75b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2725,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "claims",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Claim)2720_storage)"
      },
      {
        "astId": 2727,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "claimCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2731,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "hospitalList",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 2735,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "medical_procedure_cost",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2739,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "medical_procedure_probability",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2744,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "policy",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2748,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "membership_nft",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2752,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "policy_name",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2754,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "loading_rate",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2756,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "policy_counter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2758,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "treasury_wallet",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Claim)2720_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Treasury.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)2720_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Claim)2720_storage": {
        "encoding": "inplace",
        "label": "struct Treasury.Claim",
        "members": [
          {
            "astId": 2713,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "hospitalName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2715,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "patient_address",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2717,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "medicalProcedure",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2719,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "medicalProcedureCost",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}